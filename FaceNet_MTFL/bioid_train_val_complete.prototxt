name: "FaceNet"
layer {
    	name: "data"
    	type: "HDF5Data"
    	top: "data"

	top: "eye_visibility_left"
	top: "eye_visibility_right"
	top: "nose_visibility"
	top: "mouth_visibility_left"
	top: "mouth_visibility_right"
	#top: "gender"
	top: "smile"
	top: "glasses"

	top: "left_eye"
	top: "right_eye"
	top: "nose"
	top: "left_mouth"
	top: "right_mouth"

    	hdf5_data_param {
		source: "/home/wzleong/Downloads/MTFL/train_complete_scaled_mean_subtracted_own_data_multiple_label_data_list.txt"

		batch_size: 128
		shuffle: true
	}
	include: { phase: TRAIN }
}
layer {
    	name: "data"
    	type: "HDF5Data"
    	top: "data"

	top: "eye_visibility_left"
	top: "eye_visibility_right"
	top: "nose_visibility"
	top: "mouth_visibility_left"
	top: "mouth_visibility_right"
	#top: "gender"
	top: "smile"
	top: "glasses"

	top: "left_eye"
	top: "right_eye"
	top: "nose"
	top: "left_mouth"
	top: "right_mouth"

    	hdf5_data_param {
		source: "/home/wzleong/Downloads/MTFL/val_complete_scaled_mean_subtracted_own_data_multiple_label_data_list.txt"

		batch_size: 128
		shuffle: true
	}
	include: { phase: TEST }
}

###########################################################
## Conv1+pool1 1
###########################################################
layer {
    	name: "conv1"
    	type: "Convolution"
	bottom: "data"
    	top: "conv1"
    	convolution_param {
		num_output: 64
		kernel_size: 9
		stride: 2
		pad: 0
	}	
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "conv1"
	top: "pool1"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}

layer {
    	name: "conv2_squeeze"
    	type: "Convolution"
	bottom: "pool1"
    	top: "conv2_squeeze"
    	convolution_param {
		num_output: 32
		kernel_size: 1
		stride: 1
		pad: 0
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu2_squeeze"
	type: "ReLU"
	bottom: "conv2_squeeze"
	top: "conv2_squeeze"
}
layer {
    	name: "conv2_1"
    	type: "Convolution"
	bottom: "conv2_squeeze"
    	top: "conv2_1"
    	convolution_param {
		num_output: 32
		kernel_size: 3
		stride: 1
		pad: 1
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 0
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 0
		decay_mult: 0 
	}
}
layer {
	name: "relu2_1"
	type: "ReLU"
	bottom: "conv2_1"
	top: "conv2_1"
}
layer {
    	name: "conv2_2"
    	type: "Convolution"
	bottom: "conv2_1"
    	top: "conv2_2"
    	convolution_param {
		num_output: 32
		kernel_size: 3
		stride: 1
		pad: 1
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 0
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 0
		decay_mult: 0 
	}
}
layer {
	name: "relu2_2"
	type: "ReLU"
	bottom: "conv2_2"
	top: "conv2_2"
}
layer {
    	name: "conv2_3"
    	type: "Convolution"
	bottom: "conv2_2"
    	top: "conv2_3"
    	convolution_param {
		num_output: 32
		kernel_size: 3
		stride: 1
		pad: 1
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 0
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 0
		decay_mult: 0 
	}
}
layer {
	name: "relu2_3"
	type: "ReLU"
	bottom: "conv2_3"
	top: "conv2_3"
}
layer {
    	name: "conv2_4"
    	type: "Convolution"
	bottom: "conv2_3"
    	top: "conv2_4"
    	convolution_param {
		num_output: 64
		kernel_size: 3
		stride: 1
		pad: 1
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 0
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 0
		decay_mult: 0 
	}
}
layer {
	name: "relu2_4"
	type: "ReLU"
	bottom: "conv2_4"
	top: "conv2_4"
}
layer {
    	name: "conv2_sub"
    	type: "Convolution"
	bottom: "conv2_squeeze"
    	top: "conv2_sub"
    	convolution_param {
		num_output: 64
		kernel_size: 3
		stride: 1
		pad: 4
		dilation: 4
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 0
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 0
		decay_mult: 0 
	}
}
layer {
	name: "relu2_sub"
	type: "ReLU"
	bottom: "conv2_sub"
	top: "conv2_sub"
}
layer {
  name: "concat_conv2"
  bottom: "conv2_sub"
  bottom: "conv2_4"
  top: "concat_conv2"
  type: "Concat"
  concat_param {
    axis: 1
  }
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "concat_conv2"
	top: "pool2"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}
layer {
    	name: "conv3_squeeze"
    	type: "Convolution"
	bottom: "pool2"
    	top: "conv3_squeeze"
    	convolution_param {
		num_output: 64
		kernel_size: 1
		stride: 1
		pad: 0
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu3_squeeze"
	type: "ReLU"
	bottom: "conv3_squeeze"
	top: "conv3_squeeze"
}

layer {
    	name: "conv3_1"
    	type: "Convolution"
	bottom: "conv3_squeeze"
    	top: "conv3_1"
    	convolution_param {
		num_output: 64
		kernel_size: 3
		stride: 1
		pad: 1
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 0
		decay_mult: 0
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 0
		decay_mult: 0 
	}
}
layer {
	name: "relu3_1"
	type: "ReLU"
	bottom: "conv3_1"
	top: "conv3_1"
}
layer {
    	name: "conv3_2"
    	type: "Convolution"
	bottom: "conv3_1"
    	top: "conv3_2"
    	convolution_param {
		num_output: 64
		kernel_size: 3
		stride: 1
		pad: 1
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu3_2"
	type: "ReLU"
	bottom: "conv3_2"
	top: "conv3_2"
}
layer {
    	name: "conv3_sub"
    	type: "Convolution"
	bottom: "conv3_squeeze"
    	top: "conv3_sub"
    	convolution_param {
		num_output: 64
		kernel_size: 3
		stride: 1
		pad: 2
		dilation: 2
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu3_sub"
	type: "ReLU"
	bottom: "conv3_sub"
	top: "conv3_sub"
}
layer {
  name: "concat_conv3"
  bottom: "conv3_sub"
  bottom: "conv3_2"
  top: "concat_conv3"
  type: "Concat"
  concat_param {
    axis: 1
  }
}
layer {
	name: "pool3"
	type: "Pooling"
	bottom: "concat_conv3"
	top: "pool3"
	pooling_param {
		pool: MAX
		kernel_size: 2
		stride: 2
	} 
}
layer {
    	name: "conv4_squeeze"
    	type: "Convolution"
	bottom: "pool3"
    	top: "conv4_squeeze"
    	convolution_param {
		num_output: 64
		kernel_size: 1
		stride: 1
		pad: 0
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu4_squeeze"
	type: "ReLU"
	bottom: "conv4_squeeze"
	top: "conv4_squeeze"
}
layer {
    	name: "conv4_1"
    	type: "Convolution"
	bottom: "conv4_squeeze"
    	top: "conv4_1"
    	convolution_param {
		num_output: 128
		kernel_size: 3
		stride: 1
		pad: 0
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu4_1"
	type: "ReLU"
	bottom: "conv4_1"
	top: "conv4_1"
}

layer {
    	name: "conv4_2"
    	type: "Convolution"
	bottom: "conv4_1"
    	top: "conv4_2"
    	convolution_param {
		num_output: 128
		kernel_size: 3
		stride: 1
		pad: 0
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu4_2"
	type: "ReLU"
	bottom: "conv4_2"
	top: "conv4_2"
}

layer {
    	name: "conv4_3"
    	type: "Convolution"
	bottom: "conv4_2"
    	top: "conv4_3"
    	convolution_param {
		num_output: 256
		kernel_size: 3
		stride: 1
		pad: 0
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu4_3"
	type: "ReLU"
	bottom: "conv4_3"
	top: "conv4_3"
}

layer {
    	name: "conv5"
    	type: "Convolution"
	bottom: "conv4_3"
    	top: "conv5"
    	convolution_param {
		num_output: 512
		kernel_size: 1
		stride: 1
		pad: 0
	}	
 	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}


#############################################
## FC layers eye confidence
#############################################

layer {
	name: "fc1_left_eye_confidence"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_left_eye_confidence"
	inner_product_param {
   		num_output: 256
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu_left_eye_confidence"
	type: "ReLU"
	bottom: "fc1_left_eye_confidence"
	top: "fc1_left_eye_confidence"
}
layer {
	name: "drop1_left_eye_confidence"
  	type: "Dropout"
  	bottom: "fc1_left_eye_confidence"
	top: "fc1_left_eye_confidence"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_left_eye_confidence"
	type: "InnerProduct"
	bottom: "fc1_left_eye_confidence"
	top: "fc2_left_eye_confidence"
	inner_product_param {
   		num_output: 1
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_left_eye_confidence"
	type: "EuclideanLoss"
	bottom: "fc2_left_eye_confidence"
     	bottom: "eye_visibility_left"
	top: "loss_left_eye_confidence"
}



layer {
	name: "fc1_right_eye_confidence"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_right_eye_confidence"
	inner_product_param {
   		num_output: 256
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu_right_eye_confidence"
	type: "ReLU"
	bottom: "fc1_right_eye_confidence"
	top: "fc1_right_eye_confidence"
}
layer {
	name: "drop1_right_eye_confidence"
  	type: "Dropout"
  	bottom: "fc1_right_eye_confidence"
	top: "fc1_right_eye_confidence"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_right_eye_confidence"
	type: "InnerProduct"
	bottom: "fc1_right_eye_confidence"
	top: "fc2_right_eye_confidence"
	inner_product_param {
   		num_output: 1
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu_right2"
#	type: "ReLU"
#	bottom: "fc2_right"
#	top: "fc2_right"
#}
layer {
	name: "loss_right_eye_confidence"
	type: "EuclideanLoss"
	bottom: "fc2_right_eye_confidence"
     	bottom: "eye_visibility_right"
	top: "loss_right_eye_confidence"
}	

layer {
	name: "fc1_glasses"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_glasses"
	inner_product_param {
   		num_output: 256
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu_glasses"
	type: "ReLU"
	bottom: "fc1_glasses"
	top: "fc1_glasses"
}
layer {
	name: "drop1_glasses"
  	type: "Dropout"
  	bottom: "fc1_glasses"
	top: "fc1_glasses"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_glasses"
	type: "InnerProduct"
	bottom: "fc1_glasses"
	top: "fc2_glasses"
	inner_product_param {
   		num_output: 1
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu_glasses2"
#	type: "ReLU"
#	bottom: "fc2_glasses"
#	top: "fc2_glasses"
#}
layer {
	name: "loss_glasses"
	type: "EuclideanLoss"
	bottom: "fc2_glasses"
     	bottom: "glasses"
	top: "loss_glasses"
}	


##################################
# FC layers nose confidence
##################################

layer {
	name: "fc1_nose_confidence"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_nose_confidence"
	inner_product_param {
   		num_output: 256
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu_nose_confidence"
	type: "ReLU"
	bottom: "fc1_nose_confidence"
	top: "fc1_nose_confidence"
}
layer {
	name: "drop1_nose_confidence"
  	type: "Dropout"
  	bottom: "fc1_nose_confidence"
	top: "fc1_nose_confidence"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_nose_confidence"
	type: "InnerProduct"
	bottom: "fc1_nose_confidence"
	top: "fc2_nose_confidence"
	inner_product_param {
   		num_output: 1
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_nose_confidence"
	type: "EuclideanLoss"
	bottom: "fc2_nose_confidence"
     	bottom: "nose_visibility"
	top: "loss_nose_confidence"
}

################################################
# FC layers mouth confidence
################################################

layer {
	name: "fc1_left_mouth_confidence"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_left_mouth_confidence"
	inner_product_param {
   		num_output: 256
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu_left_mouth_confidence"
	type: "ReLU"
	bottom: "fc1_left_mouth_confidence"
	top: "fc1_left_mouth_confidence"
}
layer {
	name: "drop1_left_mouth_confidence"
  	type: "Dropout"
  	bottom: "fc1_left_mouth_confidence"
	top: "fc1_left_mouth_confidence"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_left_mouth_confidence"
	type: "InnerProduct"
	bottom: "fc1_left_mouth_confidence"
	top: "fc2_left_mouth_confidence"
	inner_product_param {
   		num_output: 1
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_left_mouth_confidence"
	type: "EuclideanLoss"
	bottom: "fc2_left_mouth_confidence"
     	bottom: "mouth_visibility_left"
	top: "loss_left_mouth_confidence"
}


layer {
	name: "fc1_right_mouth_confidence"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_right_mouth_confidence"
	inner_product_param {
   		num_output: 256
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu_right_mouth_confidence"
	type: "ReLU"
	bottom: "fc1_right_mouth_confidence"
	top: "fc1_right_mouth_confidence"
}
layer {
	name: "drop1_right_mouth_confidence"
  	type: "Dropout"
  	bottom: "fc1_right_mouth_confidence"
	top: "fc1_right_mouth_confidence"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_right_mouth_confidence"
	type: "InnerProduct"
	bottom: "fc1_right_mouth_confidence"
	top: "fc2_right_mouth_confidence"
	inner_product_param {
   		num_output: 1
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu_right2"
#	type: "ReLU"
#	bottom: "fc2_right"
#	top: "fc2_right"
#}
layer {
	name: "loss_right_mouth_confidence"
	type: "EuclideanLoss"
	bottom: "fc2_right_mouth_confidence"
     	bottom: "mouth_visibility_right"
	top: "loss_right_mouth_confidence"
}	


layer {
	name: "fc1_smile"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_smile"
	inner_product_param {
   		num_output: 256
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "relu_smile"
	type: "ReLU"
	bottom: "fc1_smile"
	top: "fc1_smile"
}
layer {
	name: "drop1_smile"
  	type: "Dropout"
  	bottom: "fc1_smile"
	top: "fc1_smile"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_smile"
	type: "InnerProduct"
	bottom: "fc1_smile"
	top: "fc2_smile"
	inner_product_param {
   		num_output: 1
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu_right2"
#	type: "ReLU"
#	bottom: "fc2_right"
#	top: "fc2_right"
#}
layer {
	name: "loss_smile"
	type: "EuclideanLoss"
	bottom: "fc2_smile"
     	bottom: "smile"
	top: "loss_smile"
}



#############################################
## FC layers eye coordinate
#############################################

layer {
	name: "fc1_left_eye_coordinate"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_left_eye_coordinate"
	inner_product_param {
   		num_output: 512
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "drop1_left_eye_coordinate"
  	type: "Dropout"
  	bottom: "fc1_left_eye_coordinate"
	top: "fc1_left_eye_coordinate"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_left_eye_coordinate"
	type: "InnerProduct"
	bottom: "fc1_left_eye_coordinate"
	top: "fc2_left_eye_coordinate"
	inner_product_param {
   		num_output: 2
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_left_eye_coordinate"
	type: "EuclideanLoss"
	bottom: "fc2_left_eye_coordinate"
     	bottom: "left_eye"
	top: "loss_left_eye_coordinate"
}


layer {
	name: "fc1_right_eye_coordinate"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_right_eye_coordinate"
	inner_product_param {
   		num_output: 512
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "drop1_right_eye_coordinate"
  	type: "Dropout"
  	bottom: "fc1_right_eye_coordinate"
	top: "fc1_right_eye_coordinate"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_right_eye_coordinate"
	type: "InnerProduct"
	bottom: "fc1_right_eye_coordinate"
	top: "fc2_right_eye_coordinate"
	inner_product_param {
   		num_output: 2
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_right_eye_coordinate"
	type: "EuclideanLoss"
	bottom: "fc2_right_eye_coordinate"
     	bottom: "right_eye"
	top: "loss_right_eye_coordinate"
}


##################################
# FC layers nose
##################################

layer {
	name: "fc1_nose_coordinate"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_nose_coordinate"
	inner_product_param {
   		num_output: 512
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "drop1_nose_coordinate"
  	type: "Dropout"
  	bottom: "fc1_nose_coordinate"
	top: "fc1_nose_coordinate"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_nose_coordinate"
	type: "InnerProduct"
	bottom: "fc1_nose_coordinate"
	top: "fc2_nose_coordinate"
	inner_product_param {
   		num_output: 2
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_nose_coordinate"
	type: "EuclideanLoss"
	bottom: "fc2_nose_coordinate"
     	bottom: "nose"
	top: "loss_nose_coordinate"
}

################################################
# FC layers mouth
################################################


layer {
	name: "fc1_left_mouth_coordinate"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_left_mouth_coordinate"
	inner_product_param {
   		num_output: 512
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "drop1_left_mouth_coordinate"
  	type: "Dropout"
  	bottom: "fc1_left_mouth_coordinate"
	top: "fc1_left_mouth_coordinate"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_left_mouth_coordinate"
	type: "InnerProduct"
	bottom: "fc1_left_mouth_coordinate"
	top: "fc2_left_mouth_coordinate"
	inner_product_param {
   		num_output: 2
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_left_mouth_coordinate"
	type: "EuclideanLoss"
	bottom: "fc2_left_mouth_coordinate"
     	bottom: "left_mouth"
	top: "loss_left_mouth_coordinate"
}

layer {
	name: "fc1_right_mouth_coordinate"
	type: "InnerProduct"
	bottom: "conv5"
	top: "fc1_right_mouth_coordinate"
	inner_product_param {
   		num_output: 512
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
layer {
	name: "drop1_right_mouth_coordinate"
  	type: "Dropout"
  	bottom: "fc1_right_mouth_coordinate"
	top: "fc1_right_mouth_coordinate"
	dropout_param {
 	dropout_ratio: 0.5
  	}
}
layer {
	name: "fc2_right_mouth_coordinate"
	type: "InnerProduct"
	bottom: "fc1_right_mouth_coordinate"
	top: "fc2_right_mouth_coordinate"
	inner_product_param {
   		num_output: 2
		weight_filler {
      			type: "xavier"
		}
		bias_filler {
			type: "constant"
		}
	}
	# learning rate and decay multipliers for the filters
 	param { 
		lr_mult: 1 
		decay_mult: 1
	}
  	# learning rate and decay multipliers for the biases (usually double for better convergence)
  	param { 
		lr_mult: 2
		decay_mult: 0 
	}
}
#layer {
#	name: "relu2"
#	type: "ReLU"
#	bottom: "fc2"
#	top: "fc2"
#}
layer {
	name: "loss_right_mouth_coordinate"
	type: "EuclideanLoss"
	bottom: "fc2_right_mouth_coordinate"
     	bottom: "right_mouth"
	top: "loss_right_mouth_coordinate"
}	

